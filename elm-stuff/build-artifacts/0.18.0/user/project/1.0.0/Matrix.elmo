var _user$project$Matrix$toListOfLists = function (matrix) {
	return _elm_lang$core$Array$toList(
		A2(_elm_lang$core$Array$map, _elm_lang$core$Array$toList, matrix));
};
var _user$project$Matrix$height = function (matrix) {
	return _elm_lang$core$Array$length(matrix);
};
var _user$project$Matrix$width = function (matrix) {
	return A2(
		_elm_lang$core$Maybe$withDefault,
		0,
		A2(
			_elm_lang$core$Maybe$map,
			_elm_lang$core$Array$length,
			A2(_elm_lang$core$Array$get, 0, matrix)));
};
var _user$project$Matrix$neighborCoords = F3(
	function (matrix, row, col) {
		return {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: row - 1, _1: col},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: row - 1, _1: col + 1},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: row, _1: col + 1},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: row + 1, _1: col + 1},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: row + 1, _1: col},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: row + 1, _1: col - 1},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: row, _1: col - 1},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: row - 1, _1: col - 1},
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			}
		};
	});
var _user$project$Matrix$get = F3(
	function (matrix, row, col) {
		return A2(
			_elm_lang$core$Maybe$andThen,
			_elm_lang$core$Array$get(col),
			A2(_elm_lang$core$Array$get, row, matrix));
	});
var _user$project$Matrix$update = F4(
	function (matrix, row, col, f) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			matrix,
			A2(
				_elm_lang$core$Maybe$map,
				function (current) {
					return A2(
						_elm_lang$core$Maybe$withDefault,
						matrix,
						A2(
							_elm_lang$core$Maybe$map,
							function (oldRow) {
								return function (newRow) {
									return A3(_elm_lang$core$Array$set, row, newRow, matrix);
								}(
									A3(
										_elm_lang$core$Array$set,
										col,
										f(current),
										oldRow));
							},
							A2(_elm_lang$core$Array$get, row, matrix)));
				},
				A3(_user$project$Matrix$get, matrix, row, col)));
	});
var _user$project$Matrix$neighbors = F3(
	function (matrix, row, col) {
		return A2(
			_elm_lang$core$List$filterMap,
			_elm_lang$core$Basics$identity,
			{
				ctor: '::',
				_0: A3(_user$project$Matrix$get, matrix, row - 1, col),
				_1: {
					ctor: '::',
					_0: A3(_user$project$Matrix$get, matrix, row - 1, col + 1),
					_1: {
						ctor: '::',
						_0: A3(_user$project$Matrix$get, matrix, row, col + 1),
						_1: {
							ctor: '::',
							_0: A3(_user$project$Matrix$get, matrix, row + 1, col + 1),
							_1: {
								ctor: '::',
								_0: A3(_user$project$Matrix$get, matrix, row + 1, col),
								_1: {
									ctor: '::',
									_0: A3(_user$project$Matrix$get, matrix, row + 1, col - 1),
									_1: {
										ctor: '::',
										_0: A3(_user$project$Matrix$get, matrix, row, col - 1),
										_1: {
											ctor: '::',
											_0: A3(_user$project$Matrix$get, matrix, row - 1, col - 1),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}
			});
	});
var _user$project$Matrix$init = F3(
	function (height, width, f) {
		return A2(
			_elm_lang$core$Array$initialize,
			height,
			function (row) {
				return A2(
					_elm_lang$core$Array$initialize,
					width,
					function (col) {
						return A2(f, row, col);
					});
			});
	});
